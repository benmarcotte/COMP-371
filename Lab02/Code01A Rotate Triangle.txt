float dt = glfwGetTime() - lastFrameTime;
        lastFrameTime += dt;
        
        angle = (angle + rotationSpeed * dt); // angles in degrees, but glm expects radians (conversion below)
        glm::mat4 rotationMatrix = glm::rotate(glm::mat4(1.0f), glm::radians(angle), glm::vec3(0.0f, 1.0f, 0.0f));
        
        GLuint worldMatrixLocation = glGetUniformLocation(shaderProgram, "worldMatrix");
        glUniformMatrix4fv(worldMatrixLocation, 1, GL_FALSE, &rotationMatrix[0][0]);